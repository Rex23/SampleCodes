Keywords:

1. count(*) over(partition by team_id)
2. group_concat(distinct(product) order by product asc separator ',')
3. order by product asc
4. IFNULL(sum(quantity), 0)
5. order by travelled_distance desc, name asc
6. left(order_date, 7)
7. count(distinct customer_id)
8. select cast(order_date as varchar(7)) as month ? (check its accuracy)
9. where invoice > 20
10. round(sum(units*P.price)/sum(U.units),2)
11. 'Case When Then ELSE END' usage:
Examples:
https://www.w3schools.com/sql/func_mysql_case.asp

CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;

Example 1:
SELECT CustomerName, City, Country
FROM Customers
ORDER BY
(CASE
    WHEN City IS NULL THEN Country
    ELSE City
END);

Example 2:
select id, 
	sum(case when month = 'jan' then revenue else null end) as Jan_Revenue,
	sum(case when month = 'feb' then revenue else null end) as Feb_Revenue,
	sum(case when month = 'mar' then revenue else null end) as Mar_Revenue,
	sum(case when month = 'apr' then revenue else null end) as Apr_Revenue,
	sum(case when month = 'may' then revenue else null end) as May_Revenue,
	sum(case when month = 'jun' then revenue else null end) as Jun_Revenue,
	sum(case when month = 'jul' then revenue else null end) as Jul_Revenue,
	sum(case when month = 'aug' then revenue else null end) as Aug_Revenue,
	sum(case when month = 'sep' then revenue else null end) as Sep_Revenue,
	sum(case when month = 'oct' then revenue else null end) as Oct_Revenue,
	sum(case when month = 'nov' then revenue else null end) as Nov_Revenue,
	sum(case when month = 'dec' then revenue else null end) as Dec_Revenue
from department
group by id
order by id

12. round(100 * sum(order_date = customer_pref_delivery_date) / count(*),2)
13. sum(order_date = customer_pref_delivery_date)
14. count(*)
15. min(event_date)
16. self join examples:
Example:
select min(a.x - b.x) as shortest
from point a, point b
where a.x > b.x
Example:
SELECT MIN(ABS(P1.x - P2.x)) AS shortest FROM point AS P1
JOIN point AS P2 ON P1.x <> P2.x

17. union

Example:
SELECT name, population, area
FROM World
WHERE area > 3000000 
UNION
SELECT name, population, area
FROM World
WHERE population > 25000000

18. where -> group by -> having

19. where month(order_date) = 2 and year(order_date) = 2020

20. UNION ALL:
Example:
SELECT '[0-5>' AS bin
UNION ALL
SELECT '[5-10>' AS bin
UNION ALL
SELECT '[10-15>' AS bin
UNION ALL
SELECT '15 or more' AS bin

21. case when then else end:

SELECT session_id, 
           CASE WHEN duration/60<5 THEN '[0-5>'
                WHEN duration/60>=5 AND duration/60<10 THEN '[5-10>'
                WHEN duration/60>=10 AND duration/60<15 THEN '[10-15>'
                ELSE '15 or more' END AS bin
    FROM sessions
    
22. Note that author_id is the column in the original table, and id is the one in the new table. 'Where' needs to use the original column name, and 'order by' needs to use new column name!
Example:
select distinct(author_id) id
from Views
where author_id = viewer_id
order by id asc

23. update a table using 'update' and 'set'.
Example:
update salary set sex= CHAR(ASCII('f') + ASCII('m') - ASCII(sex));

24. having combined with sum
Example:
SELECT customer_id, name
FROM Customers JOIN Orders USING(customer_id) 
    JOIN Product USING(product_id)
GROUP BY customer_id
HAVING SUM(IF(LEFT(order_date, 7) = '2020-06', quantity, 0) * price) >= 100
    AND SUM(IF(LEFT(order_date, 7) = '2020-07', quantity, 0) * price) >= 100

25. multiple join (see above)
Example:
SELECT customer_id, name
FROM Customers JOIN Orders USING(customer_id) 
    JOIN Product USING(product_id)
GROUP BY customer_id
HAVING SUM(IF(LEFT(order_date, 7) = '2020-06', quantity, 0) * price) >= 100
    AND SUM(IF(LEFT(order_date, 7) = '2020-07', quantity, 0) * price) >= 100

26. regexp_like
Example:
select user_id, name, mail
from Users
where regexp_like(mail, '^[A-Za-z]+[A-Za-z0-9\_\.\-]*@leetcode.com');

27. isnull or is null
where isnull(bonus) or bonus < 1000
or 
where bonus is null or bonus < 1000

28. <> and != both represent not equal.

29. lower; trim; date_format; group by 1, 2; order by 1, 2;
Example:
SELECT LOWER(TRIM(product_name)) product_name, date_format(sale_date, "%Y-%m") sale_date, count(sale_id) total
FROM sales
GROUP BY 1, 2
ORDER BY 1, 2

**********************************************************************************************************************************************
1543. Fix Product Name Format (what a classic solution!!!!!! re-do!!!!!!!!)

1082. Sales Analysis I (Did not figure out the solution. re-do!)
#Method 1: ??? does not work???
#SELECT TOP 1 WITH TIES seller_id
#FROM Sales
#GROUP BY seller_id
#ORDER BY SUM(price) DESC

603. Consecutive Available Seats (failed to figure out. re-do!!!!!! join with itself)
1241. Number of Comments per Post (made so many mistakes. re-do.)
610. Triangle Judgement (use case when then else end to generate a new column! Notice the criterion for judging a triangle!)
1050. Actors and Directors Who Cooperated At Least Three Times (note that group by can use multiple criteria!)
584. Find Customer Referee (the names should be able to duplicate because they may be different people!)
1280. Students and Examinations (classic. I did not figure out the solution!!!!!! re-do!!!!!!!!!!)
1511. Customer Order Frequency (Classic. multiple join and having combined with sum. I did not figure out this. re-do!!!!)
613. Shortest Distance in a Line (I did not figure out this. self join. re-do!!!!)
1173. Immediate Food Delivery I (I did not figure out this. re-do!!!)
1179. Reformat Department Table (I did not figure out this. sum is necessary. See the reason in the first post discussions. re-do!)
1303. Find the Team Size 
Solution:
Window function? 
select employee_id, count(*) over(partition by team_id) as team_size
from employee
1327. List the Products Ordered in a Period (not smooth. re-do!)
1435. Create a Session Bar Chart (I did not figure out the solution. Definitely re-do!!!!!!)
627. Swap Salary (I did not figure out the solution. Definitely re-do!!!!)
586. Customer Placing the Largest Number of Orders (The usage of group by something order by count(*) is unfamiliar! Do not understand!!! re-do!!!!!!)

***********************************************************************************************
Structured Query Language

MySQL is a relational database management system

*PopSQL is also needed; a program works like a text editor hooked up to MySQL

*Tutorial:
https://www.youtube.com/watch?v=HXV3zeQKqGY&t=14247s

*Installation of MySQL on Windows:
52:29
MySQL community server
MySQL 5.7 Command Line Client
PopSQL hostname: localhost
port: 3306
1:15:50 (creating tables)

*create database giraffe;

*
SELECT employee.name, employee.age
FROM employee
WHERE employee.salary > 30000;

*INT
DECIMAL(M,N) #M, total digits, N, digits after the decimal point
VARCHAR(1)
BLOB
DATA
TIMESTAMP

1:30:52
