//My solution:

class Solution {
    
    public int lengthLongestPath(String input) {
       
        int length = 0, max_length = 0;
        List <String> lines = new ArrayList<>();
        List <Integer> line_count_t = new ArrayList<>();
        
        int loc = 0;
        
        while (loc < input.length())
        {            
            int loc_next = input.indexOf("\n", loc);
            
            if (loc_next == -1) loc_next = input.length();
            
            String substr = input.substring(loc, loc_next);
            
            int num_t = (int) substr.chars().filter(ch -> ch =='\t').count();
            
            line_count_t.add(num_t);
            
            lines.add(input.substring(loc + num_t, loc_next));
            
            loc = loc_next + 1;
        }
        
        Stack <Pair <Integer, Boolean> > a_stack = new Stack<>();
        
        int pre_t = -1;
        for (int i = 0; i < lines.size(); ++i)
        {
            while (line_count_t.get(i) <= pre_t)
            {
                Pair <Integer, Boolean> index_file = a_stack.peek();
                a_stack.pop();
                int line_temp = index_file.getKey();
                length -= index_file.getValue() ? lines.get(line_temp).length() : lines.get(line_temp).length() + 1;
                pre_t = a_stack.size() == 0 ? -1 : line_count_t.get(a_stack.peek().getKey());
            }
            
            Boolean file = false;
            
            if (lines.get(i).indexOf(".") != -1) file = true;
            
            a_stack.add(new Pair<Integer, Boolean>(i, file));
            
            length += file ? lines.get(i).length(): lines.get(i).length() + 1;
            
            //System.out.println(length);
            
            if (file) max_length = Math.max(max_length, length);
            pre_t = line_count_t.get(i);
        }        
        
        return max_length;
    }
}

//Given solution:
/*
public int lengthLongestPath(String input) {
        Deque<Integer> stack = new ArrayDeque<>();
        stack.push(0); // "dummy" length
        int maxLen = 0;
        for(String s:input.split("\n")){
            int lev = s.lastIndexOf("\t")+1; // number of "\t"
            while(lev+1<stack.size()) stack.pop(); // find parent
            int len = stack.peek()+s.length()-lev+1; // remove "/t", add"/"
            stack.push(len);
            // check if it is file
            if(s.contains(".")) maxLen = Math.max(maxLen, len-1); 
        }
        return maxLen;
    }
*/
