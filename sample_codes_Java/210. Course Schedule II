class Solution {
    
    Map <Integer, List <Integer> > hash_ = new HashMap<>();
    List <Integer> course_status = new ArrayList<>(); //0: unassigned; 1: pre; 2: leaf
    List <Integer> solution = new ArrayList<>();
    
    boolean helper(int course)
    {
        var adjacent = hash_.getOrDefault(course, new ArrayList<>());
        
        course_status.set(course, 1);
        
        for (int i = 0; i < adjacent.size(); ++i)
        {
            if (course_status.get(adjacent.get(i)) == 1) 
            {
                return false;
            }
            if (course_status.get(adjacent.get(i)) == 2) continue;
            boolean flag = helper(adjacent.get(i));
            if (!flag) return false;
        }
        
        course_status.set(course, 2);
        solution.add(course);
              
        return true;
    }
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        
        for (int i = 0; i < numCourses; ++i) course_status.add(0);
        
        for (int i = 0; i < prerequisites.length; ++i)
        {
            var list = hash_.getOrDefault(prerequisites[i][1], new ArrayList<>());
            list.add(prerequisites[i][0]);
            hash_.put(prerequisites[i][1], list);
        }
        
        for (int i = 0; i < numCourses; ++i)
        {
            if (course_status.get(i) == 0)
            {
                boolean flag = helper(i);
                if (!flag) return new int[0];
            }
        }        
        
        Collections.reverse(solution);
        
        int[] result = new int[numCourses];
        
        for (int i = 0; i < numCourses; ++i)
        {
            result[i] = solution.get(i);
        }
        
        return result;        
    }
}
