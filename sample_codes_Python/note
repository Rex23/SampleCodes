***********************************tutorials***********************************
*Python tutorials:
https://www.geeksforgeeks.org/python-programming-language/?ref=lbp (Good)
https://www.tutorialspoint.com/python3/index.htm (Good)
https://www.python-course.eu/python3_course.php (Good)
https://docs.python.org/3/tutorial/ (Seems good)
https://realpython.com/
https://www.w3schools.com/python/ (Just so so)

*Python inheritance tutorial:
https://www.w3schools.com/python/python_inheritance.asp
https://www.python-course.eu/python3_inheritance.php

*Decorator:
https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators
https://wiki.python.org/moin/PythonDecorators
https://www.python.org/dev/peps/pep-0318/

*Python formatted output tutorial:
https://www.python-course.eu/python3_formatted_output.php

*Videos:
Intermediate Python Programming Course:
https://www.youtube.com/watch?v=HGOBQPFzWKo&t=5116s
Object Oriented Programming (OOP) in Python:
https://www.youtube.com/watch?v=MikphENIrOo
***********************************tutorials***********************************

***********************************topics**************************************
Topics:
*How to get the ASCII value of a character
https://stackoverflow.com/questions/227459/how-to-get-the-ascii-value-of-a-character
Example:
>>> ord('a')
97
>>> chr(97)
'a'
>>> chr(ord('a') + 3)
'd'
>>>

*all function:
Example:
Check if all items in a list are True:
mylist = [True, True, True]
x = all(mylist)
Output:
True

*lambda function:
https://realpython.com/python-lambda/
https://www.w3schools.com/python/python_lambda.asp

*(*args and **kwargs)
https://www.geeksforgeeks.org/args-kwargs-python/
Example:
    def func2(*args, **kwargs):
        for item in args:
            print("args: ", item)
        for key, value in kwargs.items():
            print("kwargs: ", key, value)

    func2("a", "b", m = "item1", n = "item2")

*heapq:
https://www.geeksforgeeks.org/heap-queue-or-heapq-in-python/
***********************************topics**************************************

*collections.deque:
https://www.geeksforgeeks.org/deque-in-python/
append() :- This function is used to insert the value in its argument to the right end of deque.
appendleft() :- This function is used to insert the value in its argument to the left end of deque.
pop() :- This function is used to delete an argument from the right end of deque.
popleft() :- This function is used to delete an argument from the left end of deque.

*integer max:
https://stackoverflow.com/questions/13795758/what-is-sys-maxint-in-python-3
import sys
sys.maxsize

*float max:
float("inf")

Python knowledge test:
https://realpython.com/quizzes/

*PriorityQueue
https://towardsdatascience.com/introduction-to-priority-queues-in-python-83664d3178c3
https://www.bogotobogo.com/python/python_PriorityQueue_heapq_Data_Structure.php

*inf and maxsize
https://stackoverflow.com/questions/7781260/how-can-i-represent-an-infinite-number-in-python
https://stackoverflow.com/questions/7604966/maximum-and-minimum-values-for-ints

*Initialize a 2D array:
dp = [[1000000] * d for i in range(n)] 
dp = [[1000000] * d] * n #wrong!!!!!!!!!!!!!!!!!!!!!! (don't know why!!!)

*Divide two integers always do floor division, e.g. 1 / -10 = -1
fixed by using int(float(a) / b)!!!!!!

*format:
https://stackoverflow.com/questions/16926130/convert-to-binary-and-keep-leading-zeros-in-python
Example:
format(14, '#010b')
'0b00001110'

*Pass by reference:
No
https://realpython.com/python-pass-by-reference/

*Queue in Python:
https://www.geeksforgeeks.org/queue-in-python/
Method 1:
use list
Method 2:
from collections import deque ( append() and popleft() are used )
Method 3:
from queue import Queue

maxsize – Number of items allowed in the queue.
empty() – Return True if the queue is empty, False otherwise.
full() – Return True if there are maxsize items in the queue. If the queue was initialized with maxsize=0 (the default), then full() never returns True.
get() – Remove and return an item from the queue. If queue is empty, wait until an item is available.
get_nowait() – Return an item if one is immediately available, else raise QueueEmpty.
put(item) – Put an item into the queue. If the queue is full, wait until a free slot is available before adding the item.
put_nowait(item) – Put an item into the queue without blocking. If no free slot is immediately available, raise QueueFull.
qsize() – Return the number of items in the queue.

Example:
    # Python program to
    # demonstrate implementation of
    # queue using queue module


    from queue import Queue

    # Initializing a queue
    q = Queue(maxsize = 3)

    # qsize() give the maxsize 
    # of the Queue 
    print(q.qsize()) 

    # Adding of element to queue
    q.put('a')
    q.put('b')
    q.put('c')

    # Return Boolean for Full 
    # Queue 
    print("\nFull: ", q.full()) 

    # Removing element from queue
    print("\nElements dequeued from the queue")
    print(q.get())
    print(q.get())
    print(q.get())

    # Return Boolean for Empty 
    # Queue 
    print("\nEmpty: ", q.empty())

    q.put(1)
    print("\nEmpty: ", q.empty()) 
    print("Full: ", q.full())

    # This would result into Infinite 
    # Loop as the Queue is empty. 
    # print(q.get())

*set is a hash set in Python

*Ternary operator:
Example:
max_size = min(pre_loc + 4, len(s)) if num_dots != 3 else len(s)

*keyword: None (In Java it is null; In C++ it is NULL or nullptr)

*Does a slicing operation give me a deep or shallow copy? (important)
https://stackoverflow.com/questions/19068707/does-a-slicing-operation-give-me-a-deep-or-shallow-copy
Example:
a = [{"a": "b"}, 2]
b = a[:1]
b[0]["a"] = "f"
print(a, b)

*slice (similar to C++ resize)
Example:
    def visit(self, url: str) -> None:
        self.webpage = self.webpage[:self.cur + 1]
        self.webpage.append(url)
        self.cur = len(self.webpage) - 1

*return None value:
Example:
    def visit(self, url: str) -> None:
        self.webpage = self.webpage[:self.cur + 1]
        self.webpage.append(url)
        self.cur = len(self.webpage) - 1

**args and **kwargs
Example:
def viking_chorus(myfunc):
    def inner_func(*args, **kwargs):
        for i in range(8):
            myfunc(*args, **kwargs)
    return inner_func
    
*reverse a list:
solution.reverse()
or
solution = solution[::-1]

*Initialize a list with zeros:
Example:
course_status = [0] * numCourses #[0 for k in range(numCourses)]

*Negate a bool:
if not flag:
 dosomething...

*__init__.py
https://stackoverflow.com/questions/448271/what-is-init-py-for

*class
class QCLoad(object):
 def __init__(self):
  self.label = "something"

*What is the difference between dict and collections.defaultdict?
https://stackoverflow.com/questions/6589814/what-is-the-difference-between-dict-and-collections-defaultdict
The difference is that a defaultdict will "default" a value if that key has not been set yet. If you didn't use a defaultdict you'd have to check to see if that key exists, and if it doesn't, set it to what you want.

The lambda is defining a factory for the default value. That function gets called whenever it needs a default value. You could hypothetically have a more complicated default function.

*itermediate tutorial:
https://www.youtube.com/watch?v=HGOBQPFzWKo&t=201s

*mylist = [a,b,c]

*if something:
 else:
 
*len(mylist)

*mylist.append(something)

*mylist.insert(1, something)

*item = mylist.pop() #returns and remove

*mylist.remove(something)

*mylist.clear()

*mylist.reverse() or mylist[::-1]

*mylist.sort()

*new_list = sorted(mylist)

*mylist = [0] * 5

*mylist2 = mylist + mylist2 #this is concatenation of two lists

*a = mylist[1:5] #the last index is excluded

*a = mylist[:5] or a = mylist[1:] or a = mylist[::1]

*list_org = [...]
 list_cpy = list_org #both refer to the same memory
 list_cpy = list_org.copy() #not refer to the same memory
 list_cpy = list(list_org) #creat a new list
 list_cpy = list_or[:] #not refer to the same memory
 
*list comprehension
 mylist = [1, 2, ...6]
 b = [i*i for i in mylist]
 
*tuple cannot be changed after creation

*the parentesis is optional for tuple

*mytuple=("Max") #not recognized as a tuple, put comma after it
print(type(mytuple)) #str

*mytuple[0] = "New" #error

*my_tuple.count('p')

*my_tuple.index('p')

*unpack:
name, age, city = my_tuple
i1, *i2, i3 = mytuple #i1 is the first, and i3 is the last, and i2 is converted to a list!

*sys:
import sys
sys.getsizeof(my_list)

*timeit
timeit.timeit(stmt="[0, ...,5]", number = 100000)

*mydict = {"name": "Max, "age": 28, ...}
 mydict = dict(name = "Mary, age = 27, ...)
 mydict["email"] = "max..."
 del mydict["name"] #delete the key
 mydict.pop("age")
 mydict.popitem() #removes the last one after 3.7.1
 if "name" in mydict:
  print(...)
 for key in mydict:
   print(key)
 for key in mydict.keys():
   print(key)
 for value in mydict.values():
   print(value)
 for key, value in mydict.items():
   print(key, value)
 mydict_cpy = mydict #same as original one
 mydict_cpy = mydict.copy()
 mydict_cpy = dict(mydict)
 mydict.update(my_dict_2) #mydict is updated by my_dict_2
 
 mytuple = (8, 7)
 mydict = {mytuple : 15} #tuple is OK, list is not OK!
 
*set (unordered, mutable, no duplicates)
myset = {1, 2, 3}
myset = set([1, 2, 3])
myset = set("Hello")
myset = {}
print(type(myset)) #dictionary!
myset.add(1)
myset.remove(4)
myset.discard(3) #no error message if not found
myset.clear()
myset.pop() #return and remove
for i in myset:
    print(i)
u = odds.union(evens) #union!
i = odds.intersection(evens)
diff = setA.difference(setB) #the ones in setA but not in setB
diff = setB.symmetric_difference(setA) #both in setA and setB
setA.update(setB) #union and setA is updated in place!
setA.intersection_update(setB) #intersection and setA is updated in place!
setA.difference_update(setB) #same thing
setA.symmetric_difference_update(setB) #same thing
setA.issubset(setB)
setB.issuperset(setA)
setA.isdisjoint(setB) #no intersection returns true
setB = setA
setB = setA.copy()
setB = set(setA)

*a = frozenset([1, 2, 3, 4]) #cannot change after creation
 a.add(2) #error
 a.remove(1) #error
 
*string #ordered, immutable!, text representation
my_string = "Hello World" or 'Hello World"
my_string = 'I\'m a programmer' or "I'm a programmer" #!!!
my_string = """Hello \ #\ means continue in the next line
World""" #multi-line quote

*try:
 except:

*strings
my_string = "Hello World"
char = my_string[0]
char = my_string[-1]
my_string[0] = 'h' #error! strings are immutable
substring = my_string[1:5] #index 5 is excluded
substring = my_string[:5]
substring = my_string[::-1] #reverse the string!
sentence = greeting + " " + name
for i in greeting:
   print(i)
if 'e' in greeting:
   print('yes')
else:
   print('no')
my_string = my_string.strip() #remove the white space before and after #have to assign it to update as it is immutable
my_string.upper()
my_string.lower()
my_string.startswith('Hello') #check whether starts with 'Hello'
my_string.endswith('Hello')
my_string.find('o')
my_string.find('lo') #-1 returned if not found
my_string.count('o')
my_string.replace('World', 'Universe') #return a new string #does nothing is not found
my_list = my_string.split() #convert to a list separated by space, default is " "
my_list = my_string.split(",")
new_string = ' '.join(my_list) #convert a list to a string
my_list = ['a'] * 6
my_string = ''.join(my_list)
#%, .format(), f-strings #three formatting
method 1:
var = "Tom"
my_string = "the variable is %s" % var
var = 3
my_string = "the variable is %d" % var
var = 3.1234567
my_string = "the variable is %f" % var #default 6 digits
my_string = "the variable is %.2f" % var

method 2:
var = 3.1234567
my_string = "the variable is {}".format(var)
var2 = 6
my_string = "the variable is {:.2f} and {}".format(var, var2)

method 3 (f-string since 3.6):
my_string = f"the variable is {var} and {var2}"
my_string = f"the variable is {var*2} and {var2}"

*from timeit import default_timer as timer
start = timer()
end = timer()
print(end - start)

*collections: counter, namedtuple, OrderedDict, defaultdict, deque
*Counter
from collections import Counter
a = 'aaaaabbbccc'
my_counter = Counter(a)
print(my_counter)
Counter({'a': 5, 'b': 4, 'c': 3})
my_counter.keys()
my_counter.values()
my_counter.most_common(1) #the most common
[('a', 5)]
my_counter.most_common(1)[0][0]
a
list(my_counter.elements()) #in list() it is the iterator

*namedtuple
from collections import namedtuple

*How can I do a line break (line continuation) in Python?
https://stackoverflow.com/questions/53162/how-can-i-do-a-line-break-line-continuation-in-python
Only use when necessary!
Example:
if a == True and \
   b == False

*Example practise:

*************Example heapq:*************
    import heapq

    a = [1, 2, 7, 12, 3, 5, 4]

    heapq.heapify(a)

    print(list(a))

    heapq.heappush(a, 17)

    print(a)

    while len(a) > 0:
        print(heapq.heappop(a))
    
*************Example defaultdict:*************
    from collections import defaultdict

    a = defaultdict(int)

    a[1] = 2
    a[2] = 3

    print(a[3])
    
*************Example queue:*************
    from queue import Queue

    a = Queue()

    a.put(1)
    a.put(2)
    a.put(3)

    while not a.empty():
        print(a.get())


 















