*itermediate tutorial:
https://www.youtube.com/watch?v=HGOBQPFzWKo&t=201s

*mylist = [a,b,c]

*if something:
 else:
 
*len(mylist)

*mylist.append(something)

*mylist.insert(1, something)

*item = mylist.pop() #returns and remove

*mylist.remove(something)

*mylist.clear()

*mylist.reverse() or mylist[::-1]

*mylist.sort()

*new_list = sorted(mylist)

*mylist = [0] * 5

*mylist2 = mylist + mylist2 #this is concatenation of two lists

*a = mylist[1:5] #the last index is excluded

*a = mylist[:5] or a = mylist[1:] or a = mylist[::1]

*list_org = [...]
 list_cpy = list_org #both refer to the same memory
 list_cpy = list_org.copy() #not refer to the same memory
 list_cpy = list(list_org) #creat a new list
 list_cpy = list_or[:] #not refer to the same memory
 
*list comprehension
 mylist = [1, 2, ...6]
 b = [i*i for i in mylist]
 
*tuple cannot be changed after creation

*the parentesis is optional for tuple

*mytuple=("Max") #not recognized as a tuple, put comma after it
print(type(mytuple)) #str

*mytuple[0] = "New" #error

*my_tuple.count('p')

*my_tuple.index('p')

*unpack:
name, age, city = my_tuple
i1, *i2, i3 = mytuple #i1 is the first, and i3 is the last, and i2 is converted to a list!

*sys:
import sys
sys.getsizeof(my_list)

*timeit
timeit.timeit(stmt="[0, ...,5]", number = 100000)

*mydict = {"name": "Max, "age": 28, ...}
 mydict = dict(name = "Mary, age = 27, ...)
 mydict["email"] = "max..."
 del mydict["name"] #delete the key
 mydict.pop("age")
 mydict.popitem() #removes the last one after 3.7.1
 if "name" in mydict:
  print(...)
 for key in mydict:
   print(key)
 for key in mydict.keys():
   print(key)
 for value in mydict.values():
   print(value)
 for key, value in mydict.items():
   print(key, value)
 mydict_cpy = mydict #same as original one
 mydict_cpy = mydict.copy()
 mydict_cpy = dict(mydict)
 mydict.update(my_dict_2) #mydict is updated by my_dict_2
 
 mytuple = (8, 7)
 mydict = {mytuple : 15} #tuple is OK, list is not OK!
 
*set (unordered, mutable, no duplicates)
myset = {1, 2, 3}
myset = set([1, 2, 3])
myset = set("Hello")
myset = {}
print(type(myset)) #dictionary!
myset.add(1)
myset.remove(4)
myset.discard(3) #no error message if not found
myset.clear()
myset.pop() #return and remove
for i in myset:
    print(i)
u = odds.union(evens) #union!
i = odds.intersection(evens)
diff = setA.difference(setB) #the ones in setA but not in setB
diff = setB.symmetric_difference(setA) #both in setA and setB
setA.update(setB) #union and setA is updated in place!
setA.intersection_update(setB) #intersection and setA is updated in place!
setA.difference_update(setB) #same thing
setA.symmetric_difference_update(setB) #same thing
setA.issubset(setB)
setB.issuperset(setA)
setA.isdisjoint(setB) #no intersection returns true
setB = setA
setB = setA.copy()
setB = set(setA)

*a = frozenset([1, 2, 3, 4]) #cannot change after creation
 a.add(2) #error
 a.remove(1) #error
 
*string #ordered, immutable!, text representation
my_string = "Hello World" or 'Hello World"
my_string = 'I\'m a programmer' or "I'm a programmer" #!!!
my_string = """Hello \ #\ means continue in the next line
World""" #multi-line quote


 
*try:
 except:














