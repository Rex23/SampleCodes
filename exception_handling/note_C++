//Exception.h

#include <string>
#include <stdexcept>
#define SOME_EXCEPTION(message) throw Exception((message), __FILE__, __LINE__)

class Exception : public std::logic_error
{
 public:
  Exception(const std::string& message);
  Exception(const std::string& message, const std::string& filename, const int line);
  
  std::string getMessage() const;
 protected:
  static std::string buildFullMessage(const std::string& message, const std::string& filename, const int line);
};

inline Exception::Exception(const std::string& message) : std::logic_error(message.c_str())
{
}

inline Exception::Exception(const std::string& message, const std::string& filename, const int line) : std::logic_error(buildFullMessage(message, filename, line).c_str())
{
}

inline std::string Exception::getMessage() const
{
 return this->what();
}

inline std::string Exception::buildFullMessage(const std::string& message, const std::string& filename, const int line)
{
 return message + std::string(" File[") + filename + "]Line[" + std::to_string(line) + "]";
}

//AnotherException.h:
#include "Exception.h"
#include <string>
#define SUB_EXCEPTION(message) throw AnotherException((message), __FILE__, __LINE__)

class AnotherException : public Exception
{
 public:
  inline AnotherException(const string& message, const std::string& filename, const int line) : Exception(message, filename, line){}
};

//some code in another file:
SOME_EXCEPTION("Bla bla bla");



//Usage:

try
{
 //codes
}
catch (Exception &e)
{
 std::cout << e.getMessage();
}
catch(AnotherException &e)
{
 std::cout << e.getMessage();
}
catch(const std::string& message)
{
 std::cout << message << std::endl;
}
catch(...)
{
 std::cout << "Unknown Exception.\n";
}
