*1 << 1 (2^0) 1 << 2 (2^1) ...

*divide a number by 2: num=num>>1

*reminder of a number by 2: num = num & 1

*'+' preceeds '&': 
Example: 
1 + 2 & 3

*for any number, couting number of bits of 1:
Equation:
f(N) = f(N / 2) + N % 2

Example:
338. Counting Bits
Solution: (Java)
public int[] countBits(int num) {
    int[] f = new int[num + 1];
    for (int i=1; i<=num; i++) f[i] = f[i >> 1] + (i & 1);
    return f;
}

*grey code:
https://cp-algorithms.com/algebra/gray-code.html

*operator >> (<<) precedes ^

*output bit in C++
https://katyscode.wordpress.com/2012/05/12/printing-numbers-in-binary-format-in-c/#:~:text=int%20v%20%3D%200x12345678%3B%20for%20(,%3E%3E%20i)%20%26%201)%3B
Example1:
int v = 0x12345678;
for (int i = 31; i >= 0; i--)
    std::cout << ((v >> i) & 1); //the & eliminates all the higher order bits

Example2:
#include <bitset>
int v = 0x12345678;
std::cout << std::bitset<32>(v);
